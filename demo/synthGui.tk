#!/bin/sh
# \
exec wish "$0" "$@"
 
 
# http://www.tkdocs.com/tutorial/concepts.html#widgets
# http://www.tkdocs.com/tutorial/widgets.html
# http://www.tkdocs.com/tutorial/morewidgets.html
# http://www.tkdocs.com/tutorial/grid.html
# https://www.tcl.tk/man/tcl/TkCmd/contents.htm
 

array set MSG_TYPE__NUMBER {
    DEFAULT 0
    SET_OSCILLATOR_1_FREQUENCY 11
    SET_OSCILLATOR_1_WAVE_TYPE 12
    SET_OSCILLATOR_2_FREQUENCY 21
    SET_OSCILLATOR_2_WAVE_TYPE 22
    SET_LFO_FREQUENCY 31
    SET_LFO_WAVE_TYPE 32
    ENVELOPE_ENABLE 41
    ENVELOPE_DISABLE 42
}
 
 
 

proc SendData { data } {
    set dataLengthAsInt [binary format c [string length $data]]
    
    set buf "$dataLengthAsInt$data"
    
    Puts "sending [string length $buf] bytes total"
    Puts "sending [string length $data] bytes data"
    
    puts -nonewline stdout $buf
    flush stdout
}

proc AppendMessageType { bufName msgType } {
    global MSG_TYPE__NUMBER
    
    upvar 1 $bufName buf
    
    set num $MSG_TYPE__NUMBER(DEFAULT)
    
    if { [info exists MSG_TYPE__NUMBER($msgType)] } {
        set num $MSG_TYPE__NUMBER($msgType)
    }
    
    AppendU8 buf $num
}

proc AppendU8 { bufName val } {
    upvar 1 $bufName buf
    
    append buf [binary format c $val]
}

proc AppendU16 { bufName val } {
    upvar 1 $bufName buf
    
    append buf [binary format S $val]
}

proc MakeBuf { } {
    return ""
}



proc PrintState { } {
    PrintSampleRate
}


proc Puts { str } {
    puts stderr $str
}





proc OnSampleRateChange { val } {
    Puts "SampleRate: $val"
}

proc MakeSampleRateGrid { parent freqLow freqHigh freqDefault } {
    set this $parent.sampleRate
 
    # Create frame and use it from here forward
    ttk::frame $this -padding "3 3 3 3" -relief sunken
 
    # Label it
    ttk::label $this.label -text "Sample Rate"
 
    # Get slider
    scale $this.scale \
        -orient horizontal -length 200 -from $freqLow -to $freqHigh \
        -variable $this.scaleVal -command OnSampleRateChange

    # Set defaults
    $this.scale set $freqDefault
 
    # Grid
    grid $this
    grid $this.label -row 0 -sticky w
    grid $this.scale -row 1 -sticky w
 
    return $this
}



proc OnOscillatorWaveTypeChange { oscName wavetypeName } {
    upvar #0 $wavetypeName wavetype
    
    Puts "WaveType: $oscName $wavetype"
    
    SendOscillatorWaveTypeChange $oscName $wavetype
}

proc SendOscillatorWaveTypeChange { oscName wavetype } {
    set buf [MakeBuf]
    
    set waveNum 1
    
    if { $wavetype == "none" } {
        set waveNum 0
    } elseif { $wavetype == "sine" } {
        set waveNum 1
    } elseif { $wavetype == "sawr" } {
        set waveNum 2
    } elseif { $wavetype == "sawl" } {
        set waveNum 3
    } elseif { $wavetype == "square" } {
        set waveNum 4
    } elseif { $wavetype == "triangle" } {
        set waveNum 5
    }
    

    if { $oscName == "osc1" } {
        AppendMessageType buf SET_OSCILLATOR_1_WAVE_TYPE
        AppendU8          buf $waveNum
        SendData $buf
    } elseif { $oscName == "osc2" } {
        AppendMessageType buf SET_OSCILLATOR_2_WAVE_TYPE
        AppendU8          buf $waveNum
        SendData $buf
    } elseif { $oscName == "lfo" } {
        AppendMessageType buf SET_LFO_WAVE_TYPE
        AppendU8          buf $waveNum
        SendData $buf
    }
}

proc OnOscillatorFrequencyChange { oscName val } {
    Puts "WaveFreqChange: $oscName $val"
    
    SendOscillatorFrequencyChange $oscName $val
}

proc SendOscillatorFrequencyChange { oscName val } {
    set buf [MakeBuf]

    if { $oscName == "osc1" } {
        AppendMessageType buf SET_OSCILLATOR_1_FREQUENCY
        AppendU16         buf $val
        SendData $buf
    } elseif { $oscName == "osc2" } {
        AppendMessageType buf SET_OSCILLATOR_2_FREQUENCY
        AppendU16         buf $val
        SendData $buf
    } elseif { $oscName == "lfo" } {
        AppendMessageType buf SET_LFO_FREQUENCY
        AppendU16         buf $val
        SendData $buf
    }
}

proc MakeOscillatorGrid { parent oscName title freqLow freqHigh freqDefault waveDefault } {
    set this ${parent}.${oscName}
 
    # Create frame and use it from here forward
    ttk::frame $this -padding "3 3 3 3" -relief sunken
 
    # Label it
    ttk::label $this.label -text $title
 
    # Add radiobuttons
    ttk::radiobutton $this.sine \
        -value sine -text sine -variable $this.wavetype \
        -command [list OnOscillatorWaveTypeChange $oscName $this.wavetype]
    ttk::radiobutton $this.square \
        -value square -text square -variable $this.wavetype \
        -command [list OnOscillatorWaveTypeChange $oscName $this.wavetype]
    ttk::radiobutton $this.triangle \
        -value triangle -text triangle -variable $this.wavetype \
        -command [list OnOscillatorWaveTypeChange $oscName $this.wavetype]
    ttk::radiobutton $this.sawl \
        -value sawl -text sawl -variable $this.wavetype \
        -command [list OnOscillatorWaveTypeChange $oscName $this.wavetype]
    ttk::radiobutton $this.sawr \
        -value sawr -text sawr -variable $this.wavetype \
        -command [list OnOscillatorWaveTypeChange $oscName $this.wavetype]
    ttk::radiobutton $this.none \
        -value none -text none -variable $this.wavetype \
        -command [list OnOscillatorWaveTypeChange $oscName $this.wavetype]
        
    # Frequency selection
    scale $this.scale \
        -orient horizontal -length 200 -from $freqLow -to $freqHigh \
        -command [list OnOscillatorFrequencyChange $oscName]

    # Set defaults
    $this.$waveDefault invoke
    $this.scale set $freqDefault
        
    # Grid
    grid $this
    grid $this.label    -row 0 -column 0 -columnspan 3 -sticky w
    grid $this.sine     -row 1 -column 0 -sticky w
    grid $this.square   -row 1 -column 1 -sticky w
    grid $this.triangle -row 1 -column 2 -sticky w
    grid $this.sawl     -row 2 -column 0 -sticky w
    grid $this.sawr     -row 2 -column 1 -sticky w
    grid $this.none     -row 2 -column 2 -sticky w
    grid $this.scale    -row 3 -column 0 -columnspan 3
 
    return $this
}


proc OnEnvelopeADSRChange { param val } {
    Puts "EnvelopADSR: $param $val"
}

proc OnEnvelopeADSREnableChange { valName } {
    upvar #0 $valName val
    
    Puts "OnEnvelopeADSREnableChange: $val"
    
    if { $val } {
        SendEnvelopeADSREnable
    } else {
        SendEnvelopeADSRDisable
    }
}

proc SendEnvelopeADSREnable { } {
    set buf [MakeBuf]

    AppendMessageType buf ENVELOPE_ENABLE
    
    SendData $buf
}
proc SendEnvelopeADSRDisable { } {
    set buf [MakeBuf]

    AppendMessageType buf ENVELOPE_DISABLE
    
    SendData $buf
}


proc MakeEnvelopeADSR { parent
                        aLow aHigh aDefault 
                        dLow dHigh dDefault
                        sLow sHigh sDefault
                        rLow rHigh rDefault } {
    set this ${parent}.envADSR
 
    # Create frame and use it from here forward
    ttk::frame $this -padding "3 3 3 3" -relief sunken
 
    # Label it
    ttk::label $this.label  -text "Envelope ADSR"
    ttk::label $this.labelA -text "A"
    ttk::label $this.labelD -text "D"
    ttk::label $this.labelS -text "S"
    ttk::label $this.labelR -text "R"
 
    # Controls
    ttk::checkbutton $this.checkbutton -text "Enable" \
        -variable $this.checkbuttonVal \
        -command [list OnEnvelopeADSREnableChange $this.checkbuttonVal]
    scale $this.scaleA -orient vertical -length 100 -from $aHigh -to $aLow \
        -command [list OnEnvelopeADSRChange A]
    scale $this.scaleD -orient vertical -length 100 -from $dHigh -to $dLow \
        -command [list OnEnvelopeADSRChange D]
    scale $this.scaleS -orient vertical -length 100 -from $sHigh -to $sLow \
        -command [list OnEnvelopeADSRChange S]
    scale $this.scaleR -orient vertical -length 100 -from $rHigh -to $rLow \
        -command [list OnEnvelopeADSRChange R]
    
    # Set defaults
    $this.checkbutton invoke
    $this.scaleA set $aDefault
    $this.scaleD set $dDefault
    $this.scaleS set $sDefault
    $this.scaleR set $rDefault
    
    # Grid
    grid $this
    #grid $this.label  -row 0 -column 0 -columnspan 4 -sticky w
    grid $this.label  -row 0 -column 0 -columnspan 4 -sticky w
    grid $this.checkbutton -row 0 -column 3

    grid $this.labelA -row 1 -column 0
    grid $this.labelD -row 1 -column 1
    grid $this.labelS -row 1 -column 2
    grid $this.labelR -row 1 -column 3
 
    grid $this.scaleA -row 2 -column 0
    grid $this.scaleD -row 2 -column 1
    grid $this.scaleS -row 2 -column 2
    grid $this.scaleR -row 2 -column 3
 
    return $this
}
 
proc SetUpGui { } {
    # Title
    wm title . "Synth Control"
 
    # Root frame
    ttk::frame .c -padding "3 3 3 3"
 
    # Sample Rate
    set sampleRateGrid [MakeSampleRateGrid .c 10000 20000 12000]
 
    # Oscillator
    set osc1Grid [MakeOscillatorGrid .c osc1 "Oscillator 1" 1 1500 440 sine]
    set osc2Grid [MakeOscillatorGrid .c osc2 "Oscillator 2" 1 1500 420 none]
    set lfoGrid  [MakeOscillatorGrid .c lfo  "LFO"          1  100  40 sine]
 
    # EnvelopADSR
    set envADSRGrid [MakeEnvelopeADSR .c        \
                                      1 500  50 \
                                      1 500 100 \
                                      1 100  50 \
                                      1 500  20]
 
    # Pack it all in
    grid .c              -row 0 -sticky nsew
    grid $sampleRateGrid -row 0 -sticky ew
    grid $osc1Grid       -row 1 -sticky ew
    grid $osc2Grid       -row 2 -sticky ew
    grid $lfoGrid        -row 3 -sticky ew
    grid $envADSRGrid    -row 4 -sticky ew
}
 
proc Init { } {
    fconfigure stdout -translation binary
}
 
proc Main { } {
    global argc
    global argv
    global argv0

    Init
    SetUpGui
}
 
Main